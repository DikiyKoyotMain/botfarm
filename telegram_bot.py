import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from db import init_db, get_db
from models import Player, Building, Worker, Vehicle
from sqlalchemy.orm import Session
from db import SessionLocal
import asyncio
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
BUILDING_COSTS = {
    "farm": 200,
    "warehouse": 300,
    "refinery": 500,
    "mine": 400
}

WORKER_COSTS = {
    "farmer": 100,
    "miner": 150,
    "driver": 200,
    "worker": 120
}

VEHICLE_COSTS = {
    "truck": 800,
    "harvester": 600,
    "excavator": 1000
}

# –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
ICONS = {
    "farm": "üåæ",
    "warehouse": "üè†", 
    "refinery": "‚õΩ",
    "mine": "‚õèÔ∏è",
    "farmer": "üë®‚Äçüåæ",
    "miner": "‚õèÔ∏è",
    "driver": "üöõ",
    "worker": "üë∑",
    "truck": "üöõ",
    "harvester": "üåæ",
    "excavator": "‚õèÔ∏è"
}

class TelegramGameBot:
    def __init__(self, token: str):
        self.token = token
        self.application = Application.builder().token(token).build()
        self.setup_handlers()
        init_db()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("profile", self.profile_command))
        self.application.add_handler(CommandHandler("build", self.build_command))
        self.application.add_handler(CommandHandler("hire", self.hire_command))
        self.application.add_handler(CommandHandler("buy", self.buy_command))
        self.application.add_handler(CommandHandler("produce", self.produce_command))
        self.application.add_handler(CommandHandler("upgrade", self.upgrade_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name
        
        with SessionLocal() as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫
            player = db.query(Player).filter(Player.name == str(user_id)).first()
            
            if not player:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                player = Player(name=str(user_id), money=1000, level=1)
                db.add(player)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ñ–µ—Ä–º—É
                farm = Building(player_id=player.id, building_type="farm", level=1)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ñ–µ—Ä–º–µ—Ä–∞
                farmer = Worker(player_id=player.id, worker_type="farmer", name="–§–µ—Ä–º–µ—Ä –ò–≤–∞–Ω")
                
                # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –≥—Ä—É–∑–æ–≤–∏–∫
                truck = Vehicle(player_id=player.id, vehicle_type="truck", name="–ì—Ä—É–∑–æ–≤–∏–∫ ‚Ññ1")
                
                db.add_all([farm, farmer, truck])
                db.commit()
                
                welcome_text = f"""
üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–µ—Ä–º–µ—Ä—Å–∫—É—é –ò–≥—Ä—É!

üë§ –ò–≥—Ä–æ–∫: {username}
üí∞ –î–µ–Ω—å–≥–∏: {player.money}$
‚≠ê –£—Ä–æ–≤–µ–Ω—å: {player.level}

üèóÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å:
üåæ –§–µ—Ä–º–∞ (—É—Ä–æ–≤–µ–Ω—å 1)
üë®‚Äçüåæ –§–µ—Ä–º–µ—Ä –ò–≤–∞–Ω
üöõ –ì—Ä—É–∑–æ–≤–∏–∫ ‚Ññ1

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/build - –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–¥–∞–Ω–∏–µ
/hire - –Ω–∞–Ω—è—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
/buy - –∫—É–ø–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É
/produce - —Å–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π
/upgrade - —É–ª—É—á—à–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å
/help - —Å–ø—Ä–∞–≤–∫–∞
                """
            else:
                welcome_text = f"""
üéÆ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ –§–µ—Ä–º–µ—Ä—Å–∫—É—é –ò–≥—Ä—É!

üë§ –ò–≥—Ä–æ–∫: {username}
üí∞ –î–µ–Ω—å–≥–∏: {player.money}$
‚≠ê –£—Ä–æ–≤–µ–Ω—å: {player.level}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/build - –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–¥–∞–Ω–∏–µ
/hire - –Ω–∞–Ω—è—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
/buy - –∫—É–ø–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É
/produce - —Å–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π
/upgrade - —É–ª—É—á—à–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å
/help - —Å–ø—Ä–∞–≤–∫–∞
                """
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
        keyboard = [
            [InlineKeyboardButton("üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É", web_app={"url": "https://localhost:8000"})]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞"""
        user_id = update.effective_user.id
        
        with SessionLocal() as db:
            player = db.query(Player).filter(Player.name == str(user_id)).first()
            if not player:
                await update.message.reply_text("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
                return
            
            buildings = db.query(Building).filter(Building.player_id == player.id).all()
            workers = db.query(Worker).filter(Worker.player_id == player.id).all()
            vehicles = db.query(Vehicle).filter(Vehicle.player_id == player.id).all()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
            profile_text = f"""
üë§ **–ü–†–û–§–ò–õ–¨ –ò–ì–†–û–ö–ê**

üí∞ –î–µ–Ω—å–≥–∏: {player.money}$
‚≠ê –£—Ä–æ–≤–µ–Ω—å: {player.level}
üìà –î–æ—Ö–æ–¥: {player.level * 10}$ –∑–∞ —Å–±–æ—Ä

üèóÔ∏è **–ó–î–ê–ù–ò–Ø** ({len(buildings)}):
"""
            
            for building in buildings:
                status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if building.is_working else "‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                profile_text += f"{ICONS.get(building.building_type, 'üè†')} {building.building_type.title()} (—É—Ä–æ–≤–µ–Ω—å {building.level})\n"
                profile_text += f"   –ó–¥–æ—Ä–æ–≤—å–µ: {building.health}% | {status}\n\n"
            
            profile_text += f"üë∑ **–†–ê–ë–û–¢–ù–ò–ö–ò** ({len(workers)}):\n"
            for worker in workers:
                status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if worker.is_working else "‚ùå –û—Ç–¥—ã—Ö–∞–µ—Ç"
                profile_text += f"{ICONS.get(worker.worker_type, 'üë∑')} {worker.name}\n"
                profile_text += f"   –¢–∏–ø: {worker.worker_type} | –£—Ä–æ–≤–µ–Ω—å: {worker.level} | –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {worker.efficiency}\n"
                profile_text += f"   {status}\n\n"
            
            profile_text += f"üöõ **–¢–ï–•–ù–ò–ö–ê** ({len(vehicles)}):\n"
            for vehicle in vehicles:
                status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if vehicle.is_working else "‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                profile_text += f"{ICONS.get(vehicle.vehicle_type, 'üöõ')} {vehicle.name}\n"
                profile_text += f"   –¢–∏–ø: {vehicle.vehicle_type} | –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: {vehicle.fuel_consumption}\n"
                profile_text += f"   –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {vehicle.capacity} | {status}\n\n"
            
            await update.message.reply_text(profile_text, parse_mode='Markdown')
    
    async def build_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞"""
        keyboard = [
            [InlineKeyboardButton(f"{ICONS['farm']} –§–µ—Ä–º–∞ ({BUILDING_COSTS['farm']}$)", callback_data="build_farm")],
            [InlineKeyboardButton(f"{ICONS['warehouse']} –°–∫–ª–∞–¥ ({BUILDING_COSTS['warehouse']}$)", callback_data="build_warehouse")],
            [InlineKeyboardButton(f"{ICONS['refinery']} –ó–∞–≤–æ–¥ ({BUILDING_COSTS['refinery']}$)", callback_data="build_refinery")],
            [InlineKeyboardButton(f"{ICONS['mine']} –®–∞—Ö—Ç–∞ ({BUILDING_COSTS['mine']}$)", callback_data="build_mine")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üèóÔ∏è **–°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–û**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def hire_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞–π–º–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤"""
        keyboard = [
            [InlineKeyboardButton(f"{ICONS['farmer']} –§–µ—Ä–º–µ—Ä ({WORKER_COSTS['farmer']}$)", callback_data="hire_farmer")],
            [InlineKeyboardButton(f"{ICONS['miner']} –®–∞—Ö—Ç–µ—Ä ({WORKER_COSTS['miner']}$)", callback_data="hire_miner")],
            [InlineKeyboardButton(f"{ICONS['driver']} –í–æ–¥–∏—Ç–µ–ª—å ({WORKER_COSTS['driver']}$)", callback_data="hire_driver")],
            [InlineKeyboardButton(f"{ICONS['worker']} –†–∞–±–æ—á–∏–π ({WORKER_COSTS['worker']}$)", callback_data="hire_worker")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üë∑ **–ù–ê–ï–ú –†–ê–ë–û–¢–ù–ò–ö–û–í**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–π–º–∞:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def buy_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ —Ç–µ—Ö–Ω–∏–∫–∏"""
        keyboard = [
            [InlineKeyboardButton(f"{ICONS['truck']} –ì—Ä—É–∑–æ–≤–∏–∫ ({VEHICLE_COSTS['truck']}$)", callback_data="buy_truck")],
            [InlineKeyboardButton(f"{ICONS['harvester']} –ö–æ–º–±–∞–π–Ω ({VEHICLE_COSTS['harvester']}$)", callback_data="buy_harvester")],
            [InlineKeyboardButton(f"{ICONS['excavator']} –≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä ({VEHICLE_COSTS['excavator']}$)", callback_data="buy_excavator")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üöõ **–ü–û–ö–£–ü–ö–ê –¢–ï–•–ù–ò–ö–ò**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def produce_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π"""
        user_id = update.effective_user.id
        
        with SessionLocal() as db:
            player = db.query(Player).filter(Player.name == str(user_id)).first()
            if not player:
                await update.message.reply_text("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
                return
            
            # –°–æ–±–∏—Ä–∞–µ–º —É—Ä–æ–∂–∞–π
            income = player.level * 10
            player.money += income
            db.commit()
            
            await update.message.reply_text(f"üåæ **–£—Ä–æ–∂–∞–π —Å–æ–±—Ä–∞–Ω!**\n\nüí∞ –ü–æ–ª—É—á–µ–Ω–æ: +{income}$\nüíµ –ë–∞–ª–∞–Ω—Å: {player.money}$", parse_mode='Markdown')
    
    async def upgrade_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ª—É—á—à–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å"""
        user_id = update.effective_user.id
        
        with SessionLocal() as db:
            player = db.query(Player).filter(Player.name == str(user_id)).first()
            if not player:
                await update.message.reply_text("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
                return
            
            cost = player.level * 200
            if player.money < cost:
                await update.message.reply_text(f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!**\n\nüí∞ –ù—É–∂–Ω–æ: {cost}$\nüíµ –£ –≤–∞—Å: {player.money}$", parse_mode='Markdown')
                return
            
            player.money -= cost
            player.level += 1
            db.commit()
            
            await update.message.reply_text(f"‚≠ê **–£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω!**\n\nüéâ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {player.level}\nüí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {cost}$\nüíµ –ë–∞–ª–∞–Ω—Å: {player.money}$", parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
üéÆ **–°–ü–†–ê–í–ö–ê –ü–û –ò–ì–†–ï**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/produce - –°–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π (+10$ √ó —É—Ä–æ–≤–µ–Ω—å)
/upgrade - –£–ª—É—á—à–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å (—Å—Ç–æ–∏–º–æ—Å—Ç—å: —É—Ä–æ–≤–µ–Ω—å √ó 200$)

**–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ:**
/build - –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–¥–∞–Ω–∏–µ
/hire - –ù–∞–Ω—è—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
/buy - –ö—É–ø–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É

**–ò–∫–æ–Ω–∫–∏:**
üåæ –§–µ—Ä–º–∞/–ö–æ–º–±–∞–π–Ω
üè† –°–∫–ª–∞–¥
‚õΩ –ó–∞–≤–æ–¥
‚õèÔ∏è –®–∞—Ö—Ç–∞/–®–∞—Ö—Ç–µ—Ä/–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä
üë®‚Äçüåæ –§–µ—Ä–º–µ—Ä
üöõ –í–æ–¥–∏—Ç–µ–ª—å/–ì—Ä—É–∑–æ–≤–∏–∫
üë∑ –†–∞–±–æ—á–∏–π

**–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ —Å–æ–±–∏—Ä–∞–π—Ç–µ —É—Ä–æ–∂–∞–π –∫–æ–º–∞–Ω–¥–æ–π /produce
‚Ä¢ –£–ª—É—á—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞
‚Ä¢ –°—Ç—Ä–æ–π—Ç–µ –∑–¥–∞–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
‚Ä¢ –ù–∞–Ω–∏–º–∞–π—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        pass
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        data = query.data
        
        with SessionLocal() as db:
            player = db.query(Player).filter(Player.name == str(user_id)).first()
            if not player:
                await query.edit_message_text("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
                return
            
            if data.startswith("build_"):
                building_type = data.split("_")[1]
                cost = BUILDING_COSTS.get(building_type, 300)
                
                if player.money < cost:
                    await query.edit_message_text(f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!**\n\nüí∞ –ù—É–∂–Ω–æ: {cost}$\nüíµ –£ –≤–∞—Å: {player.money}$", parse_mode='Markdown')
                    return
                
                building = Building(player_id=player.id, building_type=building_type)
                player.money -= cost
                db.add(building)
                db.commit()
                
                await query.edit_message_text(f"üèóÔ∏è **{building_type.title()} –ø–æ—Å—Ç—Ä–æ–µ–Ω!**\n\nüí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {cost}$\nüíµ –ë–∞–ª–∞–Ω—Å: {player.money}$", parse_mode='Markdown')
            
            elif data.startswith("hire_"):
                worker_type = data.split("_")[1]
                cost = WORKER_COSTS.get(worker_type, 150)
                
                if player.money < cost:
                    await query.edit_message_text(f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!**\n\nüí∞ –ù—É–∂–Ω–æ: {cost}$\nüíµ –£ –≤–∞—Å: {player.money}$", parse_mode='Markdown')
                    return
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
                worker_names = {
                    "farmer": ["–§–µ—Ä–º–µ—Ä –ò–≤–∞–Ω", "–§–µ—Ä–º–µ—Ä –ü–µ—Ç—Ä", "–§–µ—Ä–º–µ—Ä –°–µ—Ä–≥–µ–π"],
                    "miner": ["–®–∞—Ö—Ç–µ—Ä –ê–ª–µ–∫—Å–µ–π", "–®–∞—Ö—Ç–µ—Ä –î–º–∏—Ç—Ä–∏–π", "–®–∞—Ö—Ç–µ—Ä –ú–∏—Ö–∞–∏–ª"],
                    "driver": ["–í–æ–¥–∏—Ç–µ–ª—å –ê–Ω–¥—Ä–µ–π", "–í–æ–¥–∏—Ç–µ–ª—å –ù–∏–∫–æ–ª–∞–π", "–í–æ–¥–∏—Ç–µ–ª—å –í–ª–∞–¥–∏–º–∏—Ä"],
                    "worker": ["–†–∞–±–æ—á–∏–π –ê—Ä—Ç–µ–º", "–†–∞–±–æ—á–∏–π –ò–≥–æ—Ä—å", "–†–∞–±–æ—á–∏–π –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω"]
                }
                
                import random
                name = random.choice(worker_names.get(worker_type, ["–†–∞–±–æ—Ç–Ω–∏–∫"]))
                
                worker = Worker(player_id=player.id, worker_type=worker_type, name=name)
                player.money -= cost
                db.add(worker)
                db.commit()
                
                await query.edit_message_text(f"üë∑ **{worker_type.title()} –Ω–∞–Ω—è—Ç!**\n\nüë§ –ò–º—è: {name}\nüí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {cost}$\nüíµ –ë–∞–ª–∞–Ω—Å: {player.money}$", parse_mode='Markdown')
            
            elif data.startswith("buy_"):
                vehicle_type = data.split("_")[1]
                cost = VEHICLE_COSTS.get(vehicle_type, 500)
                
                if player.money < cost:
                    await query.edit_message_text(f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!**\n\nüí∞ –ù—É–∂–Ω–æ: {cost}$\nüíµ –£ –≤–∞—Å: {player.money}$", parse_mode='Markdown')
                    return
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏
                vehicle_names = {
                    "truck": ["–ì—Ä—É–∑–æ–≤–∏–∫ ‚Ññ1", "–ì—Ä—É–∑–æ–≤–∏–∫ ‚Ññ2", "–ì—Ä—É–∑–æ–≤–∏–∫ ‚Ññ3"],
                    "harvester": ["–ö–æ–º–±–∞–π–Ω –£—Ä–æ–∂–∞–π", "–ö–æ–º–±–∞–π–Ω –ü–æ–ª–µ", "–ö–æ–º–±–∞–π–Ω –ó–µ—Ä–Ω–æ"],
                    "excavator": ["–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä –°–∏–ª–∞—á", "–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä –ö–æ–ø–∞—á", "–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä –ó–µ–º–ª–µ–∫–æ–ø"]
                }
                
                import random
                name = random.choice(vehicle_names.get(vehicle_type, ["–¢–µ—Ö–Ω–∏–∫–∞"]))
                
                vehicle = Vehicle(player_id=player.id, vehicle_type=vehicle_type, name=name)
                player.money -= cost
                db.add(vehicle)
                db.commit()
                
                await query.edit_message_text(f"üöõ **{vehicle_type.title()} –∫—É–ø–ª–µ–Ω!**\n\nüöõ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\nüí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {cost}$\nüíµ –ë–∞–ª–∞–Ω—Å: {player.money}$", parse_mode='Markdown')
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    from config import BOT_TOKEN
    
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram")
        print("2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª config.py")
        print("3. –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN_HERE' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω")
        exit(1)
    
    bot = TelegramGameBot(BOT_TOKEN)
    bot.run() 