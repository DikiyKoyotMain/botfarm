let playerId = null;
let playerData = null;
let gameObjects = [];
let isRotated = false;
let autoHarvestInterval = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
let tg = window.Telegram.WebApp;
if (tg && tg.initData) {
    tg.ready();
    tg.expand();
}

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–¥–∞–Ω–∏–π
const BUILDING_ICONS = {
    house: "üè†",
    windmill: "üå™Ô∏è",
    farm: "üåæ",
    warehouse: "üè≠",
    factory: "üè≠",
    silo: "üóº",
    mine: "‚õèÔ∏è",
    refinery: "‚õΩ"
};

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
const WORKER_ICONS = {
    farmer: "üë®‚Äçüåæ",
    miner: "‚õèÔ∏è",
    driver: "üöõ",
    worker: "üë∑"
};

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏
const VEHICLE_ICONS = {
    truck: "üöõ",
    harvester: "üåæ",
    excavator: "‚õèÔ∏è"
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∑–¥–∞–Ω–∏–π
const BUILDING_COLORS = {
    house: "#e74c3c",
    windmill: "#f39c12",
    farm: "#27ae60",
    warehouse: "#3498db",
    factory: "#9b59b6",
    silo: "#34495e",
    mine: "#8b4513",
    refinery: "#e67e22"
};

// –û–ø—ã—Ç –∑–∞ –ø–æ–∫—É–ø–∫–∏
const XP_REWARDS = {
    house: 10,
    windmill: 15,
    farm: 8,
    warehouse: 20,
    factory: 25,
    silo: 18,
    farmer: 5,
    miner: 8,
    driver: 12,
    worker: 6,
    truck: 30,
    harvester: 25,
    excavator: 35
};

function createPlayer() {
    const nameInput = document.getElementById("name");
    const name = nameInput.value;
    
    if (!name.trim()) {
        showNotification("–í–≤–µ–¥–∏—Ç–µ –∏–º—è!");
        nameInput.focus();
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const button = document.querySelector('.login-button');
    const originalText = button.textContent;
    if (button) {
        button.textContent = "–°–æ–∑–¥–∞–Ω–∏–µ...";
        button.disabled = true;
    }
    
    const formData = new FormData();
    formData.append('name', name.trim());
    
    fetch(`/create_player/`, { 
        method: "POST",
        body: formData
    })
        .then(res => {
            if (!res.ok) {
                return res.json().then(err => {
                    throw new Error(err.detail || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞');
                });
            }
            return res.json();
        })
        .then(data => {
            playerId = data.id;
            document.getElementById("loginSection").style.display = "none";
            document.getElementById("topResources").style.display = "flex";
            document.getElementById("actionButtons").style.display = "flex";
            loadPlayerData();
            initializeGameWorld();
            startAutoHarvest();
            showNotification("–ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!");
        })
        .catch(error => {
            console.error("Error:", error);
            showNotification(error.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞!");
        })
        .finally(() => {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            if (button) {
                button.textContent = originalText;
                button.disabled = false;
            }
        });
}

function initializeGameWorld() {
    const gameWorld = document.getElementById("gameWorld");
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    addGameObject('tree', 100, 150, 'üå≥');
    addGameObject('tree', 300, 200, 'üå≥');
    addGameObject('tree', 500, 100, 'üå≥');
    addGameObject('water', 200, 300, 'üíß');
    addGameObject('water', 400, 250, 'üíß');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ñ–µ—Ä–º—É
    addGameObject('building', 250, 200, 'üåæ', 'farm');
}

function addGameObject(type, x, y, icon, buildingType = null) {
    const gameWorld = document.getElementById("gameWorld");
    const obj = document.createElement("div");
    
    obj.className = `game-object ${type}`;
    obj.style.left = x + 'px';
    obj.style.top = y + 'px';
    obj.innerHTML = icon;
    
    if (buildingType) {
        obj.style.background = BUILDING_COLORS[buildingType] || "#667eea";
        obj.dataset.buildingType = buildingType;
    }
    
    if (type === 'building') {
        obj.classList.add('floating');
    }
    
    gameWorld.appendChild(obj);
    gameObjects.push({ element: obj, type, x, y, buildingType });
}

function loadPlayerData() {
    if (!playerId) return;
    
    fetch(`/player/${playerId}`)
        .then(res => {
            if (!res.ok) {
                throw new Error('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            return res.json();
        })
        .then(data => {
            playerData = data;
            updateUI(data);
        })
        .catch(error => {
            console.error("Error loading player data:", error);
            showNotification("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞: " + error.message);
        });
}

function updateUI(data) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
    updateResources(data);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–¥–∞–Ω–∏–π
    updateGameObjects(data.buildings);
}

function updateResources(data) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–æ–≤
    document.getElementById("goldCount").innerText = data.money || 1000;
    document.getElementById("bagsCount").innerText = Math.floor(data.money / 100) || 9;
    document.getElementById("bricksCount").innerText = Math.floor(data.money / 50) || 22;
    document.getElementById("barrelsCount").innerText = Math.floor(data.money / 80) || 12;
    document.getElementById("plantsCount").innerText = Math.floor(data.money / 200) || 4;
}

function updateGameObjects(buildings) {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–¥–∞–Ω–∏—è
    gameObjects = gameObjects.filter(obj => obj.type !== 'building');
    document.querySelectorAll('.game-object.building').forEach(el => el.remove());
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–¥–∞–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    buildings.forEach((building, index) => {
        const x = 150 + (index * 100);
        const y = 150 + (index * 80);
        const icon = BUILDING_ICONS[building.type] || 'üè†';
        addGameObject('building', x, y, icon, building.type);
    });
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä —É—Ä–æ–∂–∞—è
function startAutoHarvest() {
    if (autoHarvestInterval) {
        clearInterval(autoHarvestInterval);
    }
    
    autoHarvestInterval = setInterval(() => {
        if (playerId) {
            autoHarvest();
        }
    }, 5000); // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
}

function autoHarvest() {
    fetch(`/produce/?player_id=${playerId}`, { method: "POST" })
        .then(res => res.json())
        .then(data => {
            showNotification(`üåæ –ê–≤—Ç–æ—Å–±–æ—Ä —É—Ä–æ–∂–∞—è! +${data.income}$`);
            loadPlayerData();
        })
        .catch(error => {
            console.error("Error:", error);
        });
}

// –ú–∞–≥–∞–∑–∏–Ω
function openShop() {
    document.getElementById("shopModal").style.display = "block";
}

function closeShop() {
    document.getElementById("shopModal").style.display = "none";
}

function switchTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞–±—ã
    document.querySelectorAll('.shop-items').forEach(tab => {
        tab.style.display = 'none';
    });
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.shop-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ç–∞–±
    document.getElementById(tabName + 'Tab').style.display = 'grid';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –∫–Ω–æ–ø–∫–µ
    event.target.classList.add('active');
}

function buyItem(type, name, cost) {
    if (!playerId) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ–Ω—å–≥–∏
    if (playerData && playerData.money < cost) {
        showNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!");
        return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏
    let endpoint = '';
    let params = '';
    
    if (['house', 'windmill', 'farm', 'warehouse', 'factory', 'silo'].includes(type)) {
        endpoint = '/build/';
        params = `player_id=${playerId}&building_type=${type}`;
    } else if (['farmer', 'miner', 'driver', 'worker'].includes(type)) {
        endpoint = '/hire_worker/';
        params = `player_id=${playerId}&worker_type=${type}&name=${name}`;
    } else {
        endpoint = '/buy_vehicle/';
        params = `player_id=${playerId}&vehicle_type=${type}&name=${name}`;
    }
    
    fetch(`${endpoint}?${params}`, { method: "POST" })
        .then(res => res.json())
        .then(data => {
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ –ø–æ–∫—É–ø–∫—É
            const xp = XP_REWARDS[type] || 5;
            showNotification(`‚úÖ ${name} –∫—É–ø–ª–µ–Ω! +${xp} –æ–ø—ã—Ç–∞`);
            
            // –†–∞–∑–º–µ—â–∞–µ–º –∑–¥–∞–Ω–∏–µ –Ω–∞ –ø–æ–ª–µ –µ—Å–ª–∏ —ç—Ç–æ –∑–¥–∞–Ω–∏–µ
            if (['house', 'windmill', 'farm', 'warehouse', 'factory', 'silo'].includes(type)) {
                const x = 150 + (gameObjects.filter(obj => obj.type === 'building').length * 100);
                const y = 150 + (gameObjects.filter(obj => obj.type === 'building').length * 80);
                const icon = BUILDING_ICONS[type] || 'üè†';
                addGameObject('building', x, y, icon, type);
            }
            
            closeShop();
            loadPlayerData();
        })
        .catch(error => {
            console.error("Error:", error);
            showNotification("–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏!");
        });
}

function showResourceInfo(resourceType, resourceName) {
    let description = '';
    switch(resourceType) {
        case 'gold':
            description = '–û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –∏–≥—Ä—ã. –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.';
            break;
        case 'bags':
            description = '–ú–µ—à–∫–∏ —Å –∑–µ—Ä–Ω–æ–º. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∫–æ—Ä–º–ª–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö.';
            break;
        case 'bricks':
            description = '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –ù—É–∂–Ω—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∑–¥–∞–Ω–∏–π.';
            break;
        case 'barrels':
            description = '–ë–æ—á–∫–∏ —Å —Ç–æ–ø–ª–∏–≤–æ–º. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏.';
            break;
        case 'plants':
            description = '–†–∞—Å—Ç–µ–Ω–∏—è –∏ —Å–µ–º–µ–Ω–∞. –û—Å–Ω–æ–≤–∞ –¥–ª—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è –∫—É–ª—å—Ç—É—Ä.';
            break;
    }
    
    showNotification(`${resourceName}: ${description}`);
}

function rotateView() {
    const gameWorld = document.getElementById("gameWorld");
    isRotated = !isRotated;
    
    if (isRotated) {
        gameWorld.style.transform = "perspective(1000px) rotateX(45deg) rotateY(45deg) scale(0.8)";
    } else {
        gameWorld.style.transform = "perspective(1000px) rotateX(45deg) scale(0.8)";
    }
    
    showNotification("–í–∏–¥ –∏–∑–º–µ–Ω–µ–Ω!");
}

function removeObject() {
    if (gameObjects.length > 0) {
        const lastObject = gameObjects.pop();
        lastObject.element.remove();
        showNotification("–û–±—ä–µ–∫—Ç —É–¥–∞–ª–µ–Ω!");
    } else {
        showNotification("–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!");
    }
}

function showNotification(message) {
    const notification = document.createElement("div");
    notification.className = "notification";
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.classList.add("show");
    }, 100);
    
    setTimeout(() => {
        notification.classList.remove("show");
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 3000);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
window.onclick = function(event) {
    const shopModal = document.getElementById("shopModal");
    if (event.target === shopModal) {
        shopModal.style.display = "none";
    }
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
document.addEventListener('DOMContentLoaded', function() {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    const allButtons = document.querySelectorAll('button');
    allButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            // –í—ã–∑—ã–≤–∞–µ–º onclick –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (this.onclick) {
                this.onclick.call(this, e);
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è touch —Å–æ–±—ã—Ç–∏–π
        button.addEventListener('touchstart', function(e) {
            e.preventDefault();
            this.style.transform = 'scale(0.95)';
        });
        
        button.addEventListener('touchend', function(e) {
            e.preventDefault();
            this.style.transform = '';
            
            // –í—ã–∑—ã–≤–∞–µ–º onclick –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (this.onclick) {
                this.onclick.call(this, e);
            }
        });
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
document.addEventListener('DOMContentLoaded', function() {
    const nameInput = document.getElementById("name");
    if (nameInput) {
        nameInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                createPlayer();
            }
        });
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        nameInput.focus();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å –¥–ª—è Telegram Web App
        setTimeout(() => {
            nameInput.focus();
            nameInput.click();
        }, 100);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ–∫—É—Å–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
        nameInput.addEventListener('click', function() {
            this.focus();
        });
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Telegram Web App
        if (tg && tg.initData) {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º pointer-events –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const interactiveElements = document.querySelectorAll('input, button, .action-btn, .shop-item, .login-button');
            interactiveElements.forEach(el => {
                el.style.pointerEvents = 'auto';
                el.style.touchAction = 'manipulation';
                el.style.webkitTapHighlightColor = 'transparent';
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
            document.querySelectorAll('button').forEach(button => {
                button.addEventListener('touchstart', function(e) {
                    e.preventDefault();
                    this.style.transform = 'scale(0.95)';
                });
                
                button.addEventListener('touchend', function(e) {
                    e.preventDefault();
                    this.style.transform = '';
                });
            });
        }
    }
});

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    if (playerId) {
        loadPlayerData();
    }
}, 10000); 