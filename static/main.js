let playerId = null;
let playerData = null;
let gameObjects = [];
let isRotated = false;
let autoHarvestInterval = null;
let placementMode = false;
let selectedBuildingType = null;
let placementPreview = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
let tg = window.Telegram.WebApp;
if (tg && tg.initData) {
    tg.ready();
    tg.expand();
}

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–¥–∞–Ω–∏–π
const BUILDING_ICONS = {
    // FARM
    cotton_field: "üå±",
    sugarcane_field: "üéã",
    wheat_field: "üåæ",
    tree_farm: "üå≥",
    well: "üíß",
    farm_house: "üè†",
    salt_field: "üßÇ",
    lumberjack_house: "ü™ì",
    wood_shed: "ü™µ",
    silo: "üóº",
    storehouse: "üè™",
    wind_pump: "üí®",
    wind_mill: "üå™Ô∏è",
    farm_tractor: "üöú",
    bakery: "ü•ñ",
    cakery: "üéÇ",
    logger_house: "ü™ì",
    
    // RANCH
    ranch_house: "üêÑ",
    feed_mill: "üåæ",
    trough: "ü•£",
    chicken_coop: "üêî",
    sheep_pen: "üêë",
    milk_barn: "ü•õ",
    atv: "üèéÔ∏è",
    
    // TERRAIN
    dirt_road: "üõ£Ô∏è",
    pasture: "üåø",
    paved_road: "üõ£Ô∏è",
    pond: "üåä",
    
    // INDUSTRIAL
    oil_pump: "‚õΩ",
    water_pump: "üíß",
    water_tower: "üóº",
    warehouse: "üè≠",
    water_facility: "üè≠",
    wind_turbine: "üí®",
    worker_house: "üè†",
    fuel_storage: "‚õΩ",
    refinery: "üè≠",
    iron_mine: "‚õèÔ∏è",
    lumber_mill: "ü™µ",
    power_plant: "‚ö°",
    forklift: "üöõ",
    fabric_plant: "üßµ",
    steel_mill: "üè≠",
    nuclear_power: "‚ò¢Ô∏è",
    
    // TRADE
    trade_depot: "üì¶",
    trade_pier: "üö¢",
    neighbor_delivery: "üöö",
    freight_pier: "üö¢"
};

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
const WORKER_ICONS = {
    farmer: "üë®‚Äçüåæ",
    miner: "‚õèÔ∏è",
    driver: "üöõ",
    worker: "üë∑"
};

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏
const VEHICLE_ICONS = {
    truck: "üöõ",
    harvester: "üåæ",
    excavator: "‚õèÔ∏è"
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∑–¥–∞–Ω–∏–π
const BUILDING_COLORS = {
    // FARM - –ó–µ–ª–µ–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
    cotton_field: "#27ae60",
    sugarcane_field: "#2ecc71",
    wheat_field: "#16a085",
    tree_farm: "#27ae60",
    well: "#3498db",
    farm_house: "#e74c3c",
    salt_field: "#ecf0f1",
    lumberjack_house: "#8b4513",
    wood_shed: "#a0522d",
    silo: "#34495e",
    storehouse: "#95a5a6",
    wind_pump: "#3498db",
    wind_mill: "#f39c12",
    farm_tractor: "#e67e22",
    bakery: "#e74c3c",
    cakery: "#9b59b6",
    logger_house: "#8b4513",
    
    // RANCH - –ö–æ—Ä–∏—á–Ω–µ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
    ranch_house: "#8b4513",
    feed_mill: "#d35400",
    trough: "#a0522d",
    chicken_coop: "#f39c12",
    sheep_pen: "#95a5a6",
    milk_barn: "#ecf0f1",
    atv: "#e67e22",
    
    // TERRAIN - –°–µ—Ä—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
    dirt_road: "#95a5a6",
    pasture: "#27ae60",
    paved_road: "#7f8c8d",
    pond: "#3498db",
    
    // INDUSTRIAL - –°–∏–Ω–∏–µ –æ—Ç—Ç–µ–Ω–∫–∏
    oil_pump: "#2c3e50",
    water_pump: "#3498db",
    water_tower: "#2980b9",
    warehouse: "#34495e",
    water_facility: "#5dade2",
    wind_turbine: "#85c1e9",
    worker_house: "#85929e",
    fuel_storage: "#2c3e50",
    refinery: "#1a5276",
    iron_mine: "#7b7d7d",
    lumber_mill: "#8b4513",
    power_plant: "#f39c12",
    forklift: "#e67e22",
    fabric_plant: "#9b59b6",
    steel_mill: "#2c3e50",
    nuclear_power: "#e74c3c",
    
    // TRADE - –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
    trade_depot: "#8e44ad",
    trade_pier: "#9b59b6",
    neighbor_delivery: "#a569bd",
    freight_pier: "#6c5ce7"
};

// –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–¥–∞–Ω–∏–π
const BUILDING_COSTS = {
    // FARM
    cotton_field: 250,
    sugarcane_field: 250,
    wheat_field: 250,
    tree_farm: 500,
    well: 1250,
    farm_house: 1250,
    salt_field: 1250,
    lumberjack_house: 2500,
    wood_shed: 5000,
    silo: 10000,
    storehouse: 20000,
    wind_pump: 25000,
    wind_mill: 15000,
    farm_tractor: 175000,
    bakery: 200000,
    cakery: 250000,
    logger_house: 250000,
    
    // RANCH
    ranch_house: 1250,
    feed_mill: 5000,
    trough: 5000,
    chicken_coop: 30000,
    sheep_pen: 40000,
    milk_barn: 50000,
    atv: 50000,
    
    // TERRAIN
    dirt_road: 1000,
    pasture: 5000,
    paved_road: 10000,
    pond: 20000,
    
    // INDUSTRIAL
    oil_pump: 1250,
    water_pump: 5000,
    water_tower: 5000,
    warehouse: 10000,
    water_facility: 10000,
    wind_turbine: 2500,
    worker_house: 2500,
    fuel_storage: 15000,
    refinery: 15000,
    iron_mine: 25000,
    lumber_mill: 50000,
    power_plant: 100000,
    forklift: 125000,
    fabric_plant: 250000,
    steel_mill: 2000000,
    nuclear_power: 10000000,
    
    // TRADE
    trade_depot: 5000,
    trade_pier: 10000,
    neighbor_delivery: 15000,
    freight_pier: 250000
};

// –û–ø—ã—Ç –∑–∞ –ø–æ–∫—É–ø–∫–∏
const XP_REWARDS = {
    // FARM
    cotton_field: 5,
    sugarcane_field: 5,
    wheat_field: 5,
    tree_farm: 8,
    well: 15,
    farm_house: 20,
    salt_field: 10,
    lumberjack_house: 25,
    wood_shed: 30,
    silo: 50,
    storehouse: 60,
    wind_pump: 80,
    wind_mill: 40,
    farm_tractor: 200,
    bakery: 250,
    cakery: 300,
    logger_house: 300,
    
    // RANCH
    ranch_house: 15,
    feed_mill: 30,
    trough: 25,
    chicken_coop: 100,
    sheep_pen: 150,
    milk_barn: 200,
    atv: 150,
    
    // TERRAIN
    dirt_road: 10,
    pasture: 20,
    paved_road: 40,
    pond: 60,
    
    // INDUSTRIAL
    oil_pump: 15,
    water_pump: 30,
    water_tower: 25,
    warehouse: 40,
    water_facility: 35,
    wind_turbine: 20,
    worker_house: 15,
    fuel_storage: 50,
    refinery: 100,
    iron_mine: 150,
    lumber_mill: 200,
    power_plant: 300,
    forklift: 250,
    fabric_plant: 400,
    steel_mill: 1000,
    nuclear_power: 5000,
    
    // TRADE
    trade_depot: 30,
    trade_pier: 50,
    neighbor_delivery: 40,
    freight_pier: 300,
    
    // Workers
    farmer: 5,
    lumberjack: 25,
    rancher: 5,
    industrial_worker: 15,
    faster_farmer: 50,
    faster_lumberjack: 50,
    faster_rancher: 50,
    faster_worker: 30
};

function createPlayer() {
    const nameInput = document.getElementById("name");
    const name = nameInput.value;
    
    if (!name.trim()) {
        showNotification("–í–≤–µ–¥–∏—Ç–µ –∏–º—è!");
        nameInput.focus();
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const button = document.querySelector('.login-button');
    const originalText = button.textContent;
    if (button) {
        button.textContent = "–°–æ–∑–¥–∞–Ω–∏–µ...";
        button.disabled = true;
    }
    
    const formData = new FormData();
    formData.append('name', name.trim());
    
    fetch(`/create_player/`, { 
        method: "POST",
        body: formData
    })
        .then(res => {
            if (!res.ok) {
                return res.json().then(err => {
                    throw new Error(err.detail || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞');
                });
            }
            return res.json();
        })
        .then(data => {
            playerId = data.id;
            document.getElementById("loginSection").style.display = "none";
            document.getElementById("topResources").style.display = "flex";
            document.getElementById("actionButtons").style.display = "flex";
            loadPlayerData();
            initializeGameWorld();
            startAutoHarvest();
            showNotification("–ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!");
        })
        .catch(error => {
            console.error("Error:", error);
            showNotification(error.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞!");
        })
        .finally(() => {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            if (button) {
                button.textContent = originalText;
                button.disabled = false;
            }
        });
}

function initializeGameWorld() {
    const gameWorld = document.getElementById("gameWorld");
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    addGameObject('tree', 100, 150, 'üå≥');
    addGameObject('tree', 300, 200, 'üå≥');
    addGameObject('tree', 500, 100, 'üå≥');
    addGameObject('water', 200, 300, 'üíß');
    addGameObject('water', 400, 250, 'üíß');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ñ–µ—Ä–º—É
    addGameObject('building', 250, 200, 'üåæ', 'wheat_field');
}

function addGameObject(type, x, y, icon, buildingType = null) {
    const gameWorld = document.getElementById("gameWorld");
    const obj = document.createElement("div");
    
    obj.className = `game-object ${type}`;
    obj.style.left = x + 'px';
    obj.style.top = y + 'px';
    obj.innerHTML = icon;
    
    if (buildingType) {
        obj.style.background = BUILDING_COLORS[buildingType] || "#667eea";
        obj.dataset.buildingType = buildingType;
    }
    
    if (type === 'building') {
        obj.classList.add('floating');
    }
    
    gameWorld.appendChild(obj);
    gameObjects.push({ element: obj, type, x, y, buildingType });
}

function loadPlayerData() {
    if (!playerId) return;
    
    fetch(`/player/${playerId}`)
        .then(res => {
            if (!res.ok) {
                throw new Error('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            return res.json();
        })
        .then(data => {
            playerData = data;
            updateUI(data);
        })
        .catch(error => {
            console.error("Error loading player data:", error);
            showNotification("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞: " + error.message);
        });
}

function updateUI(data) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
    updateResources(data);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–¥–∞–Ω–∏–π
    updateGameObjects(data.buildings);
}

function updateResources(data) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–æ–≤
    document.getElementById("goldCount").innerText = data.money || 1000;
    document.getElementById("bagsCount").innerText = Math.floor(data.money / 100) || 9;
    document.getElementById("bricksCount").innerText = Math.floor(data.money / 50) || 22;
    document.getElementById("barrelsCount").innerText = Math.floor(data.money / 80) || 12;
    document.getElementById("plantsCount").innerText = Math.floor(data.money / 200) || 4;
}

function updateGameObjects(buildings) {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–¥–∞–Ω–∏—è
    gameObjects = gameObjects.filter(obj => obj.type !== 'building');
    document.querySelectorAll('.game-object.building').forEach(el => el.remove());
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–¥–∞–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    buildings.forEach((building, index) => {
        const x = 150 + (index * 100);
        const y = 150 + (index * 80);
        const icon = BUILDING_ICONS[building.type] || 'üè†';
        addGameObject('building', x, y, icon, building.type);
    });
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä —É—Ä–æ–∂–∞—è
function startAutoHarvest() {
    if (autoHarvestInterval) {
        clearInterval(autoHarvestInterval);
    }
    
    autoHarvestInterval = setInterval(() => {
        if (playerId) {
            autoHarvest();
        }
    }, 5000); // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
}

function autoHarvest() {
    fetch(`/produce/?player_id=${playerId}`, { method: "POST" })
        .then(res => res.json())
        .then(data => {
            showNotification(`üåæ –ê–≤—Ç–æ—Å–±–æ—Ä —É—Ä–æ–∂–∞—è! +${data.income}$`);
            loadPlayerData();
        })
        .catch(error => {
            console.error("Error:", error);
        });
}

// –ú–∞–≥–∞–∑–∏–Ω
function openShop() {
    document.getElementById("shopModal").style.display = "block";
}

function closeShop() {
    document.getElementById("shopModal").style.display = "none";
}

function switchTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞–±—ã
    document.querySelectorAll('.shop-items').forEach(tab => {
        tab.style.display = 'none';
    });
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.shop-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ç–∞–±
    document.getElementById(tabName + 'Tab').style.display = 'grid';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –∫–Ω–æ–ø–∫–µ
    event.target.classList.add('active');
}

function buyItem(type, name, cost, customX = null, customY = null) {
    if (!playerId) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ–Ω—å–≥–∏
    if (playerData && playerData.money < cost) {
        showNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!");
        return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏
    let endpoint = '';
    let params = '';
    
    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π
    const allBuildings = [
        'cotton_field', 'sugarcane_field', 'wheat_field', 'tree_farm', 'well', 'farm_house', 
        'salt_field', 'lumberjack_house', 'wood_shed', 'silo', 'storehouse', 'wind_pump', 
        'wind_mill', 'bakery', 'cakery', 'ranch_house', 'feed_mill', 'trough', 'chicken_coop', 
        'sheep_pen', 'milk_barn', 'dirt_road', 'pasture', 'paved_road', 'pond', 'oil_pump', 
        'water_pump', 'water_tower', 'warehouse', 'wind_turbine', 'worker_house', 'refinery', 
        'iron_mine', 'lumber_mill', 'power_plant', 'fabric_plant', 'trade_depot', 'trade_pier', 
        'neighbor_delivery'
    ];
    
    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
    const allWorkers = [
        'farmer', 'lumberjack', 'rancher', 'industrial_worker', 'faster_farmer', 
        'faster_lumberjack', 'faster_rancher', 'faster_worker'
    ];
    
    // –°–ø–∏—Å–æ–∫ –≤—Å–µ–π —Ç–µ—Ö–Ω–∏–∫–∏
    const allVehicles = ['farm_tractor', 'atv', 'forklift'];
    
    if (allBuildings.includes(type)) {
        endpoint = '/build/';
        params = `player_id=${playerId}&building_type=${type}`;
    } else if (allWorkers.includes(type)) {
        endpoint = '/hire_worker/';
        params = `player_id=${playerId}&worker_type=${type}&name=${name}`;
    } else if (allVehicles.includes(type)) {
        endpoint = '/buy_vehicle/';
        params = `player_id=${playerId}&vehicle_type=${type}&name=${name}`;
    }
    
    fetch(`${endpoint}?${params}`, { method: "POST" })
        .then(res => res.json())
        .then(data => {
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ –ø–æ–∫—É–ø–∫—É
            const xp = XP_REWARDS[type] || 5;
            showNotification(`‚úÖ ${name} –∫—É–ø–ª–µ–Ω! +${xp} –æ–ø—ã—Ç–∞`);
            
            // –†–∞–∑–º–µ—â–∞–µ–º –∑–¥–∞–Ω–∏–µ –Ω–∞ –ø–æ–ª–µ –µ—Å–ª–∏ —ç—Ç–æ –∑–¥–∞–Ω–∏–µ
            if (['house', 'windmill', 'farm', 'warehouse', 'factory', 'silo'].includes(type)) {
                let x, y;
                if (customX !== null && customY !== null) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                    x = customX;
                    y = customY;
                } else {
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
                    x = 150 + (gameObjects.filter(obj => obj.type === 'building').length * 100);
                    y = 150 + (gameObjects.filter(obj => obj.type === 'building').length * 80);
                }
                const icon = BUILDING_ICONS[type] || 'üè†';
                addGameObject('building', x, y, icon, type);
            }
            
            if (!placementMode) {
                closeShop();
            }
            loadPlayerData();
        })
        .catch(error => {
            console.error("Error:", error);
            showNotification("–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏!");
        });
}

function showResourceInfo(resourceType, resourceName) {
    let description = '';
    switch(resourceType) {
        case 'gold':
            description = '–û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –∏–≥—Ä—ã. –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.';
            break;
        case 'bags':
            description = '–ú–µ—à–∫–∏ —Å –∑–µ—Ä–Ω–æ–º. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∫–æ—Ä–º–ª–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö.';
            break;
        case 'bricks':
            description = '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –ù—É–∂–Ω—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∑–¥–∞–Ω–∏–π.';
            break;
        case 'barrels':
            description = '–ë–æ—á–∫–∏ —Å —Ç–æ–ø–ª–∏–≤–æ–º. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏.';
            break;
        case 'plants':
            description = '–†–∞—Å—Ç–µ–Ω–∏—è –∏ —Å–µ–º–µ–Ω–∞. –û—Å–Ω–æ–≤–∞ –¥–ª—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è –∫—É–ª—å—Ç—É—Ä.';
            break;
    }
    
    showNotification(`${resourceName}: ${description}`);
}

function rotateView() {
    const gameWorld = document.getElementById("gameWorld");
    isRotated = !isRotated;
    
    if (isRotated) {
        gameWorld.style.transform = "perspective(1000px) rotateX(45deg) rotateY(45deg) scale(0.8)";
    } else {
        gameWorld.style.transform = "perspective(1000px) rotateX(45deg) scale(0.8)";
    }
    
    showNotification("–í–∏–¥ –∏–∑–º–µ–Ω–µ–Ω!");
}

function startPlacement() {
    if (!playerData || !playerData.money) {
        showNotification("–ù–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!");
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–¥–∞–Ω–∏—è
    const buildingTypes = [
        // FARM
        { type: 'cotton_field', name: '–•–ª–æ–ø–∫–æ–≤–æ–µ –ø–æ–ª–µ', cost: 250, icon: 'üå±' },
        { type: 'sugarcane_field', name: '–°–∞—Ö–∞—Ä–Ω–æ–µ –ø–æ–ª–µ', cost: 250, icon: 'üéã' },
        { type: 'wheat_field', name: '–ü—à–µ–Ω–∏—á–Ω–æ–µ –ø–æ–ª–µ', cost: 250, icon: 'üåæ' },
        { type: 'tree_farm', name: '–õ–µ—Å–Ω–∞—è —Ñ–µ—Ä–º–∞', cost: 500, icon: 'üå≥' },
        { type: 'well', name: '–ö–æ–ª–æ–¥–µ—Ü', cost: 1250, icon: 'üíß' },
        { type: 'farm_house', name: '–§–µ—Ä–º–µ—Ä—Å–∫–∏–π –¥–æ–º', cost: 1250, icon: 'üè†' },
        { type: 'salt_field', name: '–°–æ–ª—è–Ω–æ–µ –ø–æ–ª–µ', cost: 1250, icon: 'üßÇ' },
        { type: 'lumberjack_house', name: '–î–æ–º –ª–µ—Å–æ—Ä—É–±–∞', cost: 2500, icon: 'ü™ì' },
        { type: 'wood_shed', name: '–î—Ä–æ–≤—è–Ω–æ–π —Å–∞—Ä–∞–π', cost: 5000, icon: 'ü™µ' },
        { type: 'silo', name: '–°–∏–ª–æ—Å', cost: 10000, icon: 'üóº' },
        { type: 'storehouse', name: '–°–∫–ª–∞–¥', cost: 20000, icon: 'üè™' },
        { type: 'wind_pump', name: '–í–µ—Ç—Ä—è–Ω–æ–π –Ω–∞—Å–æ—Å', cost: 25000, icon: 'üí®' },
        { type: 'wind_mill', name: '–í–µ—Ç—Ä—è–Ω–∞—è –º–µ–ª—å–Ω–∏—Ü–∞', cost: 15000, icon: 'üå™Ô∏è' },
        { type: 'bakery', name: '–ü–µ–∫–∞—Ä–Ω—è', cost: 200000, icon: 'ü•ñ' },
        { type: 'cakery', name: '–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∞—è', cost: 250000, icon: 'üéÇ' },
        
        // RANCH
        { type: 'ranch_house', name: '–†–∞–Ω—á–æ', cost: 1250, icon: 'üêÑ' },
        { type: 'feed_mill', name: '–ö–æ—Ä–º–æ–≤–æ–π –∑–∞–≤–æ–¥', cost: 5000, icon: 'üåæ' },
        { type: 'trough', name: '–ö–æ—Ä–º—É—à–∫–∞', cost: 5000, icon: 'ü•£' },
        { type: 'chicken_coop', name: '–ö—É—Ä—è—Ç–Ω–∏–∫', cost: 30000, icon: 'üêî' },
        { type: 'sheep_pen', name: '–û–≤—á–∞—Ä–Ω—è', cost: 40000, icon: 'üêë' },
        { type: 'milk_barn', name: '–ú–æ–ª–æ—á–Ω–∞—è —Ñ–µ—Ä–º–∞', cost: 50000, icon: 'ü•õ' },
        
        // TERRAIN
        { type: 'dirt_road', name: '–ì—Ä—É–Ω—Ç–æ–≤–∞—è –¥–æ—Ä–æ–≥–∞', cost: 1000, icon: 'üõ£Ô∏è' },
        { type: 'pasture', name: '–ü–∞—Å—Ç–±–∏—â–µ', cost: 5000, icon: 'üåø' },
        { type: 'paved_road', name: '–ê—Å—Ñ–∞–ª—å—Ç–æ–≤–∞—è –¥–æ—Ä–æ–≥–∞', cost: 10000, icon: 'üõ£Ô∏è' },
        { type: 'pond', name: '–ü—Ä—É–¥', cost: 20000, icon: 'üåä' },
        
        // INDUSTRIAL
        { type: 'oil_pump', name: '–ù–µ—Ñ—Ç—è–Ω–∞—è –≤—ã—à–∫–∞', cost: 1250, icon: '‚õΩ' },
        { type: 'water_pump', name: '–í–æ–¥—è–Ω–æ–π –Ω–∞—Å–æ—Å', cost: 5000, icon: 'üíß' },
        { type: 'water_tower', name: '–í–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω–∞—è –±–∞—à–Ω—è', cost: 5000, icon: 'üóº' },
        { type: 'warehouse', name: '–°–∫–ª–∞–¥', cost: 10000, icon: 'üè≠' },
        { type: 'wind_turbine', name: '–í–µ—Ç—Ä—è–Ω–∞—è —Ç—É—Ä–±–∏–Ω–∞', cost: 2500, icon: 'üí®' },
        { type: 'worker_house', name: '–î–æ–º —Ä–∞–±–æ—á–µ–≥–æ', cost: 2500, icon: 'üè†' },
        { type: 'refinery', name: '–ù–µ—Ñ—Ç–µ–ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∑–∞–≤–æ–¥', cost: 15000, icon: 'üè≠' },
        { type: 'iron_mine', name: '–ñ–µ–ª–µ–∑–Ω—ã–π —Ä—É–¥–Ω–∏–∫', cost: 25000, icon: '‚õèÔ∏è' },
        { type: 'lumber_mill', name: '–õ–µ—Å–æ–ø–∏–ª–∫–∞', cost: 50000, icon: 'ü™µ' },
        { type: 'power_plant', name: '–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è', cost: 100000, icon: '‚ö°' },
        { type: 'fabric_plant', name: '–¢–µ–∫—Å—Ç–∏–ª—å–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞', cost: 250000, icon: 'üßµ' },
        
        // TRADE
        { type: 'trade_depot', name: '–¢–æ—Ä–≥–æ–≤–∞—è –±–∞–∑–∞', cost: 5000, icon: 'üì¶' },
        { type: 'trade_pier', name: '–¢–æ—Ä–≥–æ–≤—ã–π –ø—Ä–∏—á–∞–ª', cost: 10000, icon: 'üö¢' },
        { type: 'neighbor_delivery', name: '–î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ—Å–µ–¥—è–º', cost: 15000, icon: 'üöö' }
    ];
    
    let menu = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:\n\n";
    buildingTypes.forEach(building => {
        if (playerData.money >= building.cost) {
            menu += `${building.icon} ${building.name} - $${building.cost}\n`;
        }
    });
    
    const choice = prompt(menu);
    if (!choice) return;
    
    const buildingIndex = parseInt(choice) - 1;
    if (buildingIndex >= 0 && buildingIndex < buildingTypes.length) {
        const building = buildingTypes[buildingIndex];
        if (playerData.money >= building.cost) {
            selectedBuildingType = building.type;
            placementMode = true;
            showNotification(`–†–µ–∂–∏–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: ${building.name}. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ø–æ–ª–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.`);
            document.getElementById("gameWorld").classList.add("placement-mode");
        } else {
            showNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!");
        }
    }
}

function placeBuilding(x, y) {
    if (!placementMode || !selectedBuildingType) return;
    
    const building = {
        type: selectedBuildingType,
        name: getBuildingName(selectedBuildingType),
        cost: BUILDING_COSTS[selectedBuildingType]
    };
    
    // –ü–æ–∫—É–ø–∞–µ–º –∑–¥–∞–Ω–∏–µ
    buyItem(selectedBuildingType, building.name, building.cost, x, y);
    
    // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    exitPlacementMode();
}

function getBuildingName(type) {
    const names = {
        // FARM
        cotton_field: '–•–ª–æ–ø–∫–æ–≤–æ–µ –ø–æ–ª–µ',
        sugarcane_field: '–°–∞—Ö–∞—Ä–Ω–æ–µ –ø–æ–ª–µ',
        wheat_field: '–ü—à–µ–Ω–∏—á–Ω–æ–µ –ø–æ–ª–µ',
        tree_farm: '–õ–µ—Å–Ω–∞—è —Ñ–µ—Ä–º–∞',
        well: '–ö–æ–ª–æ–¥–µ—Ü',
        farm_house: '–§–µ—Ä–º–µ—Ä—Å–∫–∏–π –¥–æ–º',
        salt_field: '–°–æ–ª—è–Ω–æ–µ –ø–æ–ª–µ',
        lumberjack_house: '–î–æ–º –ª–µ—Å–æ—Ä—É–±–∞',
        wood_shed: '–î—Ä–æ–≤—è–Ω–æ–π —Å–∞—Ä–∞–π',
        silo: '–°–∏–ª–æ—Å',
        storehouse: '–°–∫–ª–∞–¥',
        wind_pump: '–í–µ—Ç—Ä—è–Ω–æ–π –Ω–∞—Å–æ—Å',
        wind_mill: '–í–µ—Ç—Ä—è–Ω–∞—è –º–µ–ª—å–Ω–∏—Ü–∞',
        bakery: '–ü–µ–∫–∞—Ä–Ω—è',
        cakery: '–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∞—è',
        
        // RANCH
        ranch_house: '–†–∞–Ω—á–æ',
        feed_mill: '–ö–æ—Ä–º–æ–≤–æ–π –∑–∞–≤–æ–¥',
        trough: '–ö–æ—Ä–º—É—à–∫–∞',
        chicken_coop: '–ö—É—Ä—è—Ç–Ω–∏–∫',
        sheep_pen: '–û–≤—á–∞—Ä–Ω—è',
        milk_barn: '–ú–æ–ª–æ—á–Ω–∞—è —Ñ–µ—Ä–º–∞',
        
        // TERRAIN
        dirt_road: '–ì—Ä—É–Ω—Ç–æ–≤–∞—è –¥–æ—Ä–æ–≥–∞',
        pasture: '–ü–∞—Å—Ç–±–∏—â–µ',
        paved_road: '–ê—Å—Ñ–∞–ª—å—Ç–æ–≤–∞—è –¥–æ—Ä–æ–≥–∞',
        pond: '–ü—Ä—É–¥',
        
        // INDUSTRIAL
        oil_pump: '–ù–µ—Ñ—Ç—è–Ω–∞—è –≤—ã—à–∫–∞',
        water_pump: '–í–æ–¥—è–Ω–æ–π –Ω–∞—Å–æ—Å',
        water_tower: '–í–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω–∞—è –±–∞—à–Ω—è',
        warehouse: '–°–∫–ª–∞–¥',
        wind_turbine: '–í–µ—Ç—Ä—è–Ω–∞—è —Ç—É—Ä–±–∏–Ω–∞',
        worker_house: '–î–æ–º —Ä–∞–±–æ—á–µ–≥–æ',
        refinery: '–ù–µ—Ñ—Ç–µ–ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∑–∞–≤–æ–¥',
        iron_mine: '–ñ–µ–ª–µ–∑–Ω—ã–π —Ä—É–¥–Ω–∏–∫',
        lumber_mill: '–õ–µ—Å–æ–ø–∏–ª–∫–∞',
        power_plant: '–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è',
        fabric_plant: '–¢–µ–∫—Å—Ç–∏–ª—å–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞',
        
        // TRADE
        trade_depot: '–¢–æ—Ä–≥–æ–≤–∞—è –±–∞–∑–∞',
        trade_pier: '–¢–æ—Ä–≥–æ–≤—ã–π –ø—Ä–∏—á–∞–ª',
        neighbor_delivery: '–î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ—Å–µ–¥—è–º'
    };
    return names[type] || type;
}

function exitPlacementMode() {
    placementMode = false;
    selectedBuildingType = null;
    document.getElementById("gameWorld").classList.remove("placement-mode");
    if (placementPreview) {
        placementPreview.remove();
        placementPreview = null;
    }
}

function removeObject() {
    if (gameObjects.length > 0) {
        const lastObject = gameObjects.pop();
        lastObject.element.remove();
        showNotification("–û–±—ä–µ–∫—Ç —É–¥–∞–ª–µ–Ω!");
    } else {
        showNotification("–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!");
    }
}

function showNotification(message) {
    const notification = document.createElement("div");
    notification.className = "notification";
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.classList.add("show");
    }, 100);
    
    setTimeout(() => {
        notification.classList.remove("show");
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 3000);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
window.onclick = function(event) {
    const shopModal = document.getElementById("shopModal");
    if (event.target === shopModal) {
        shopModal.style.display = "none";
    }
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
document.addEventListener('DOMContentLoaded', function() {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    const allButtons = document.querySelectorAll('button');
    allButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            // –í—ã–∑—ã–≤–∞–µ–º onclick –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (this.onclick) {
                this.onclick.call(this, e);
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è touch —Å–æ–±—ã—Ç–∏–π
        button.addEventListener('touchstart', function(e) {
            e.preventDefault();
            this.style.transform = 'scale(0.95)';
        });
        
        button.addEventListener('touchend', function(e) {
            e.preventDefault();
            this.style.transform = '';
            
            // –í—ã–∑—ã–≤–∞–µ–º onclick –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (this.onclick) {
                this.onclick.call(this, e);
            }
        });
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
document.addEventListener('DOMContentLoaded', function() {
    const nameInput = document.getElementById("name");
    if (nameInput) {
        nameInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                createPlayer();
            }
        });
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        nameInput.focus();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å –¥–ª—è Telegram Web App
        setTimeout(() => {
            nameInput.focus();
            nameInput.click();
        }, 100);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ–∫—É—Å–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
        nameInput.addEventListener('click', function() {
            this.focus();
        });
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Telegram Web App
        if (tg && tg.initData) {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º pointer-events –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const interactiveElements = document.querySelectorAll('input, button, .action-btn, .shop-item, .login-button');
            interactiveElements.forEach(el => {
                el.style.pointerEvents = 'auto';
                el.style.touchAction = 'manipulation';
                el.style.webkitTapHighlightColor = 'transparent';
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
            document.querySelectorAll('button').forEach(button => {
                button.addEventListener('touchstart', function(e) {
                    e.preventDefault();
                    this.style.transform = 'scale(0.95)';
                });
                
                button.addEventListener('touchend', function(e) {
                    e.preventDefault();
                    this.style.transform = '';
                });
            });
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–¥–∞–Ω–∏–π
document.addEventListener('click', function(e) {
    if (placementMode && e.target.id === 'gameWorld') {
        const rect = e.target.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        placeBuilding(x, y);
    }
});

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    if (playerId) {
        loadPlayerData();
    }
}, 10000); 