let playerId = null;
let playerData = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
let tg = window.Telegram.WebApp;
tg.ready();
tg.expand();

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
const ICONS = {
    farm: "üåæ",
    warehouse: "üè†",
    refinery: "‚õΩ",
    mine: "‚õèÔ∏è",
    farmer: "üë®‚Äçüåæ",
    miner: "‚õèÔ∏è",
    driver: "üöõ",
    worker: "üë∑",
    truck: "üöõ",
    harvester: "üåæ",
    excavator: "‚õèÔ∏è"
};

function createPlayer() {
    const name = document.getElementById("name").value;
    if (!name.trim()) {
        showNotification("–í–≤–µ–¥–∏—Ç–µ –∏–º—è!");
        return;
    }
    
    const formData = new FormData();
    formData.append('name', name.trim());
    
    fetch(`/create_player/`, { 
        method: "POST",
        body: formData
    })
        .then(res => {
            if (!res.ok) {
                return res.json().then(err => {
                    throw new Error(err.detail || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞');
                });
            }
            return res.json();
        })
        .then(data => {
            playerId = data.id;
            document.getElementById("playerName").innerText = name;
            document.getElementById("loginSection").style.display = "none";
            document.getElementById("gameSection").style.display = "block";
            loadPlayerData();
            showNotification("–ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!");
        })
        .catch(error => {
            console.error("Error:", error);
            showNotification(error.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞!");
        });
}

function loadPlayerData() {
    if (!playerId) return;
    
    fetch(`/player/${playerId}`)
        .then(res => {
            if (!res.ok) {
                throw new Error('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            return res.json();
        })
        .then(data => {
            playerData = data;
            updateUI(data);
        })
        .catch(error => {
            console.error("Error loading player data:", error);
            showNotification("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞: " + error.message);
        });
}

function updateUI(data) {
    document.getElementById("money").innerText = `$${data.money}`;
    document.getElementById("level").innerText = data.level;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    const progressPercent = 50;
    document.getElementById("expBar").style.width = progressPercent + "%";
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–¥–∞–Ω–∏—è
    updateBuildingsGrid(data.buildings);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
    updateWorkersGrid(data.workers);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—à–∏–Ω—ã
    updateVehiclesGrid(data.vehicles);
}

function updateBuildingsGrid(buildings) {
    const grid = document.getElementById("buildingsGrid");
    grid.innerHTML = "";
    
    buildings.forEach(building => {
        const card = document.createElement("div");
        card.className = "item-card";
        card.innerHTML = `
            <div class="item-name">${ICONS[building.type]} ${building.type}</div>
            <div class="item-stats">
                –£—Ä–æ–≤–µ–Ω—å: ${building.level}<br>
                –ó–¥–æ—Ä–æ–≤—å–µ: ${building.health}%<br>
                –°—Ç–∞—Ç—É—Å: ${building.is_working ? "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" : "‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
            </div>
        `;
        grid.appendChild(card);
    });
}

function updateWorkersGrid(workers) {
    const grid = document.getElementById("workersGrid");
    grid.innerHTML = "";
    
    workers.forEach(worker => {
        const card = document.createElement("div");
        card.className = "item-card";
        card.innerHTML = `
            <div class="item-name">${ICONS[worker.type]} ${worker.name}</div>
            <div class="item-stats">
                –¢–∏–ø: ${worker.type}<br>
                –£—Ä–æ–≤–µ–Ω—å: ${worker.level}<br>
                –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${worker.efficiency}<br>
                –°—Ç–∞—Ç—É—Å: ${worker.is_working ? "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" : "‚ùå –û—Ç–¥—ã—Ö–∞–µ—Ç"}
            </div>
        `;
        grid.appendChild(card);
    });
}

function updateVehiclesGrid(vehicles) {
    const grid = document.getElementById("vehiclesGrid");
    grid.innerHTML = "";
    
    vehicles.forEach(vehicle => {
        const card = document.createElement("div");
        card.className = "item-card";
        card.innerHTML = `
            <div class="item-name">${ICONS[vehicle.type]} ${vehicle.name}</div>
            <div class="item-stats">
                –¢–∏–ø: ${vehicle.type}<br>
                –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: ${vehicle.fuel_consumption}<br>
                –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ${vehicle.capacity}<br>
                –°—Ç–∞—Ç—É—Å: ${vehicle.is_working ? "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" : "‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
            </div>
        `;
        grid.appendChild(card);
    });
}

function produce() {
    fetch(`/produce/?player_id=${playerId}`, { method: "POST" })
        .then(res => res.json())
        .then(data => {
            showNotification(`üåæ –£—Ä–æ–∂–∞–π —Å–æ–±—Ä–∞–Ω! +${data.income}$`);
            loadPlayerData();
        })
        .catch(error => {
            console.error("Error:", error);
            showNotification("–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —É—Ä–æ–∂–∞—è!");
        });
}

function upgrade() {
    fetch(`/upgrade/?player_id=${playerId}`, { method: "POST" })
        .then(res => res.json())
        .then(data => {
            showNotification(`‚≠ê –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${data.level}`);
            loadPlayerData();
        })
        .catch(error => {
            console.error("Error:", error);
            showNotification("–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è!");
        });
}

function buildBuilding(buildingType) {
    fetch(`/build/?player_id=${playerId}&building_type=${buildingType}`, { method: "POST" })
        .then(res => res.json())
        .then(data => {
            showNotification(`üèóÔ∏è ${buildingType} –ø–æ—Å—Ç—Ä–æ–µ–Ω!`);
            closeModal('buildModal');
            loadPlayerData();
        })
        .catch(error => {
            console.error("Error:", error);
            showNotification("–û—à–∏–±–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞!");
        });
}

function hireWorker(workerType) {
    const name = document.getElementById("workerName").value;
    if (!name.trim()) {
        showNotification("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞!");
        return;
    }
    
    fetch(`/hire_worker/?player_id=${playerId}&worker_type=${workerType}&name=${encodeURIComponent(name)}`, { method: "POST" })
        .then(res => res.json())
        .then(data => {
            showNotification(`üë∑ ${workerType} –Ω–∞–Ω—è—Ç!`);
            document.getElementById("workerName").value = "";
            closeModal('workerModal');
            loadPlayerData();
        })
        .catch(error => {
            console.error("Error:", error);
            showNotification("–û—à–∏–±–∫–∞ –Ω–∞–π–º–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞!");
        });
}

function buyVehicle(vehicleType) {
    const name = document.getElementById("vehicleName").value;
    if (!name.trim()) {
        showNotification("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã!");
        return;
    }
    
    fetch(`/buy_vehicle/?player_id=${playerId}&vehicle_type=${vehicleType}&name=${encodeURIComponent(name)}`, { method: "POST" })
        .then(res => res.json())
        .then(data => {
            showNotification(`üöõ ${vehicleType} –∫—É–ø–ª–µ–Ω!`);
            document.getElementById("vehicleName").value = "";
            closeModal('vehicleModal');
            loadPlayerData();
        })
        .catch(error => {
            console.error("Error:", error);
            showNotification("–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞—à–∏–Ω—ã!");
        });
}

function showBuildModal() {
    document.getElementById("buildModal").style.display = "block";
}

function showWorkerModal() {
    document.getElementById("workerModal").style.display = "block";
}

function showVehicleModal() {
    document.getElementById("vehicleModal").style.display = "block";
}

function closeModal(modalId) {
    document.getElementById(modalId).style.display = "none";
}

function showNotification(message) {
    const notification = document.createElement("div");
    notification.className = "notification";
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.classList.add("show");
    }, 100);
    
    setTimeout(() => {
        notification.classList.remove("show");
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 3000);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
window.onclick = function(event) {
    const modals = document.getElementsByClassName("modal");
    for (let modal of modals) {
        if (event.target === modal) {
            modal.style.display = "none";
        }
    }
}

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    if (playerId) {
        loadPlayerData();
    }
}, 10000); 